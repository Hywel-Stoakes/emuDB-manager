{"version":3,"file":"project-data.service.js","sourceRoot":"","sources":["../../../../../home/markus/code/emuDB-manager/tmp/broccoli_type_script_compiler-input_base_path-FI8bgmIz.tmp/0/src/app/project-data.service.ts"],"names":[],"mappings":"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","sourcesContent":["import {Injectable} from \"@angular/core\";\nimport {ProjectInfo} from \"./types/project-info\";\nimport {DatabaseInfo} from \"./types/database-info\";\nimport {BundleList} from \"./types/bundle-list\";\nimport {Http, Headers, RequestOptions} from \"@angular/http\";\nimport {Observable, Observer, ConnectableObservable} from \"rxjs/Rx\";\nimport {SessionInfo} from \"./types/session-info\";\nimport {UploadInfo} from \"./types/upload-info\";\nimport {ServerResponse} from \"./types/server-response\";\nimport {BundleListItem} from \"./types/bundle-list-item\";\nimport {DownloadInfo} from \"./types/download-info\";\nimport {DownloadTarget} from \"./types/download-target\";\nimport {UploadTarget} from \"./types/upload-target\";\n\n@Injectable()\nexport class ProjectDataService {\n\tprivate _connectionCount: number = 0;\n\tprivate emuWebAppURL = 'https://ips-lmu.github.io/EMU-webApp/';\n\tprivate infoObservable: ConnectableObservable<ProjectInfo>;\n\tprivate infoObserver: Observer<ProjectInfo>;\n\tprivate nodeJSServerURL = 'wss://webapp2.phonetik.uni-muenchen.de:17890/manager';\n\tprivate password: string;\n\tprivate url = 'https://www.phonetik.uni-muenchen.de/apps/emuDB-manager/server-side/emudb-manager.php';\n\tprivate username: string;\n\n\tconstructor(private http: Http) {\n\t\tthis.username = '';\n\t\tthis.password = '';\n\t\tthis.createHotObservable();\n\t}\n\n\tprivate createHotObservable(): void {\n\t\tthis.infoObservable = Observable.create(observer => {\n\t\t\tthis.infoObserver = observer;\n\t\t}).publishReplay(1);\n\t\tthis.infoObservable.connect();\n\t}\n\n\tpublic fetchData(): void {\n\t\tlet params = {\n\t\t\tquery: 'project_info'\n\t\t};\n\n\t\tthis.serverQuery(params).subscribe((next: any) => {\n\t\t\tif (next.success === true) {\n\t\t\t\tthis.infoObserver.next(next.data);\n\t\t\t} else {\n\t\t\t\tif (next.data === 'BAD_LOGIN') {\n\t\t\t\t\tthis.infoObserver.error('BAD_LOGIN');\n\t\t\t\t\tthis.createHotObservable();\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log('Unknown error in server response');\n\t\t\t\t\t//this.infoObserver.error('UNKNOWN ERROR');\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate serverQuery(params: any): Observable<ServerResponse> {\n\t\tconsole.log('Querying server', params);\n\n\t\tlet headers = new Headers({'Content-Type': 'application/x-www-form-urlencoded'});\n\t\tlet options = new RequestOptions({headers: headers});\n\n\t\tparams.user = this.username;\n\t\tparams.password = this.password;\n\n\t\tlet body = '';\n\t\tfor (let i in params) {\n\t\t\tif (body != '') {\n\t\t\t\tbody += '&';\n\t\t\t}\n\t\t\tbody += encodeURIComponent(i) + '=' + encodeURIComponent(params[i]);\n\t\t}\n\n\t\t++this._connectionCount;\n\t\treturn this.http\n\t\t\t.post(this.url, body, options)\n\t\t\t.map(response => {\n\t\t\t\t--this._connectionCount;\n\t\t\t\tlet json = response.json();\n\t\t\t\tconsole.log('Received JSON data', json);\n\t\t\t\treturn json;\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\t--this._connectionCount;\n\t\t\t\treturn Observable.throw('Error during download', error);\n\t\t\t});\n\t}\n\n\tprivate serverQueryWithDefaultSubscription(params): Observable<any> {\n\t\treturn Observable.create(observer => {\n\t\t\tthis.serverQuery(params).subscribe((next: any) => {\n\t\t\t\tif (next.success === true) {\n\t\t\t\t\tobserver.next(next.data);\n\t\t\t\t\tobserver.complete();\n\t\t\t\t} else {\n\t\t\t\t\tobserver.error(next);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic login(username: string, password: string): Observable<void> {\n\t\treturn Observable.create(observer => {\n\t\t\tthis.username = username;\n\t\t\tthis.password = password;\n\n\t\t\tlet params = {\n\t\t\t\tquery: 'login'\n\t\t\t};\n\n\t\t\tthis.serverQuery(params).subscribe((next: any) => {\n\t\t\t\tif (next.success === true) {\n\t\t\t\t\tobserver.next(null);\n\t\t\t\t\tobserver.complete();\n\t\t\t\t\tthis.fetchData();\n\t\t\t\t} else {\n\t\t\t\t\tobserver.error(next);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic logout(): void {\n\t\tthis.createHotObservable();\n\t}\n\n\n\tpublic getAllDatabases(): Observable<DatabaseInfo[]> {\n\t\treturn this.infoObservable.map((x: ProjectInfo) => {\n\t\t\treturn x.databases;\n\t\t});\n\t}\n\n\tpublic getAllBundleLists(): Observable<BundleList[]> {\n\t\treturn this.infoObservable.map((x: ProjectInfo) => {\n\t\t\tlet result: BundleList[] = [];\n\t\t\tfor (let i = 0; i < x.databases.length; ++i) {\n\t\t\t\tresult = result.concat(x.databases[i].bundleLists);\n\t\t\t}\n\t\t\treturn result;\n\t\t});\n\t}\n\n\tpublic getBundleList(database: string, name: string, archiveLabel: string): Observable<BundleList> {\n\t\treturn this.infoObservable.map((x: ProjectInfo) => {\n\t\t\tfor (let i = 0; i < x.databases.length; ++i) {\n\t\t\t\tif (x.databases[i].name === database) {\n\t\t\t\t\tfor (let j = 0; j < x.databases[i].bundleLists.length; ++j) {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tx.databases[i].bundleLists[j].name === name\n\t\t\t\t\t\t\t&& x.databases[i].bundleLists[j].archiveLabel === archiveLabel\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\treturn x.databases[i].bundleLists[j];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\t\t});\n\t}\n\n\t/**\n\t * Returns the info object for a single database\n\t *\n\t * @param name The name of the database in question\n\t * @returns A DatabaseInfo object if the DB exists, otherwise null\n\t */\n\tpublic getDatabase(name: string): Observable<DatabaseInfo> {\n\t\treturn this.infoObservable.map((x: ProjectInfo) => {\n\t\t\tfor (let i = 0; i < x.databases.length; ++i) {\n\t\t\t\tif (x.databases[i].name === name) {\n\t\t\t\t\treturn x.databases[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t});\n\t}\n\n\tpublic getName(): Observable<string> {\n\t\treturn this.infoObservable.map((x: ProjectInfo) => {\n\t\t\treturn x.name;\n\t\t});\n\t}\n\n\tpublic getDownloads(database: string): Observable<DownloadInfo[]> {\n\t\treturn this.infoObservable.map((x: ProjectInfo) => {\n\t\t\treturn x.downloads.filter(value => {\n\t\t\t\treturn (value.database == database);\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic getAllUploads(): Observable<UploadInfo[]> {\n\t\treturn this.infoObservable.map((x: ProjectInfo) => {\n\t\t\treturn x.uploads;\n\t\t});\n\t}\n\n\tpublic getUpload(uuid: string): Observable<UploadInfo> {\n\t\treturn this.infoObservable.map((x: ProjectInfo) => {\n\t\t\tfor (let i = 0; i < x.uploads.length; ++i) {\n\t\t\t\tif (x.uploads[i].uuid === uuid) {\n\t\t\t\t\treturn x.uploads[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t});\n\t}\n\n\tpublic countBundles(sessions: SessionInfo[]): number {\n\t\tlet result = 0;\n\t\tfor (let i = 0; i < sessions.length; ++i) {\n\t\t\tresult += sessions[i].bundles.length;\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic renameDatabase(oldName: string, newName: string): Observable<void> {\n\t\treturn this.serverQueryWithDefaultSubscription({\n\t\t\tquery: 'rename_db',\n\t\t\told_name: oldName,\n\t\t\tnew_name: newName\n\t\t});\n\t}\n\n\tpublic setDatabaseConfiguration(database: string, bundleComments: boolean, bundleFinishedEditing: boolean): Observable<void> {\n\t\treturn this.serverQueryWithDefaultSubscription({\n\t\t\tquery: 'set_database_configuration',\n\t\t\tdatabase: database,\n\t\t\tbundleComments: bundleComments,\n\t\t\tbundleFinishedEditing: bundleFinishedEditing\n\t\t});\n\t}\n\n\tpublic addTag(database: string, commit: string, label: string): Observable<void> {\n\t\treturn this.serverQueryWithDefaultSubscription({\n\t\t\tquery: 'add_tag',\n\t\t\tdatabase: database,\n\t\t\tcommit: commit,\n\t\t\tlabel: label\n\t\t});\n\t}\n\n\tpublic editBundleList(database: string,\n\t                      name: string,\n\t                      archiveLabel: string,\n\t                      newName: string,\n\t                      newArchiveLabel: string): Observable<void> {\n\t\treturn this.serverQueryWithDefaultSubscription({\n\t\t\t'query': 'edit_bundle_list',\n\t\t\t'database': database,\n\t\t\t'old_name': name,\n\t\t\t'old_archive_label': archiveLabel,\n\t\t\t'new_name': newName,\n\t\t\t'new_archive_label': newArchiveLabel\n\t\t});\n\t}\n\n\tpublic getUploadTarget(): UploadTarget {\n\t\treturn {\n\t\t\turl: this.url,\n\t\t\tparams: {\n\t\t\t\t'user': this.username,\n\t\t\t\t'password': this.password,\n\t\t\t\t'query': 'upload'\n\t\t\t}\n\t\t};\n\t}\n\n\tpublic getDownloadTarget(database: string, treeish: string): DownloadTarget {\n\t\treturn {\n\t\t\turl: this.url,\n\t\t\toptions: {\n\t\t\t\tquery: 'download_database',\n\t\t\t\tuser: this.username,\n\t\t\t\tpassword: this.password,\n\t\t\t\tdatabase: database,\n\t\t\t\ttreeish: treeish\n\t\t\t}\n\t\t};\n\t}\n\n\tpublic deleteUpload(identifier: string) {\n\t\treturn this.serverQueryWithDefaultSubscription({\n\t\t\t'query': 'delete_upload',\n\t\t\t'uuid': identifier\n\t\t});\n\t}\n\n\tpublic deleteBundleList(database: string, bundleList: BundleList) {\n\t\treturn this.serverQueryWithDefaultSubscription({\n\t\t\tquery: 'delete_bundle_list',\n\t\t\tdatabase: database,\n\t\t\tname: bundleList.name,\n\t\t\tarchive_label: bundleList.archiveLabel\n\t\t});\n\t}\n\n\tpublic saveUpload(identifier: string, name: string): Observable<ServerResponse> {\n\t\treturn this.serverQueryWithDefaultSubscription({\n\t\t\t'query': 'save_upload',\n\t\t\t'uuid': identifier,\n\t\t\t'name': name\n\t\t});\n\t}\n\n\tpublic createArchive(databaseName: string, treeish: string): Observable<ServerResponse> {\n\t\treturn this.serverQueryWithDefaultSubscription({\n\t\t\t'query': 'create_archive',\n\t\t\t'database': databaseName,\n\t\t\t'treeish': treeish\n\t\t});\n\t}\n\n\tpublic duplicateBundleList(database: string,\n\t                           bundleList: BundleList,\n\t                           newName: string,\n\t                           commentedOnly: boolean) {\n\n\t\t//\n\t\t// Create a modified copy of `bundleList`\n\t\tlet newBundleList: BundleList = {\n\t\t\tname: bundleList.name,\n\t\t\tarchiveLabel: bundleList.archiveLabel,\n\t\t\titems: []\n\t\t};\n\n\t\t// Copy the items from `bundleList` to `newBundleList`\n\t\tfor (let i = 0; i < bundleList.items.length; ++i) {\n\t\t\tif (commentedOnly && !bundleList.items[i].comment) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tnewBundleList.items.push({\n\t\t\t\tname: bundleList.items[i].name,\n\t\t\t\tsession: bundleList.items[i].session,\n\t\t\t\tcomment: bundleList.items[i].comment,\n\t\t\t\tfinishedEditing: false\n\t\t\t});\n\t\t}\n\n\t\t//\n\t\t// Send query to server\n\t\treturn this.serverQueryWithDefaultSubscription({\n\t\t\tquery: 'save_bundle_list',\n\t\t\tdatabase: database,\n\t\t\tname: newName,\n\t\t\tlist: JSON.stringify(newBundleList.items)\n\t\t});\n\t}\n\n\tpublic generateBundleList(database: string,\n\t                          sessionPattern: string,\n\t                          bundlePattern: string,\n\t                          editors: string[],\n\t                          personsPerBundle: number,\n\t                          shuffled: boolean) {\n\t\treturn Observable.create(observer => {\n\t\t\t//////////\n\t\t\t// Check parameter constraints\n\t\t\t//\n\n\t\t\tif (editors.length < personsPerBundle) {\n\t\t\t\tobserver.error({\n\t\t\t\t\tmessage: 'Invalid parameters.'\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t//\n\t\t\t//////////\n\n\t\t\tthis.getDatabase(database).map(dbInfo => {\n\t\t\t\tif (dbInfo === null) {\n\t\t\t\t\tobserver.error('Invalid database specified');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfor (let i = 0; i < editors.length; ++i) {\n\t\t\t\t\tfor (let j = 0; j < dbInfo.bundleLists.length; ++j) {\n\t\t\t\t\t\tif (editors[i] === dbInfo.bundleLists[j].name && dbInfo.bundleLists[j].archiveLabel === '') {\n\t\t\t\t\t\t\tobserver.error({\n\t\t\t\t\t\t\t\tmessage: 'Editor already has a' + ' non-archived bundle list: ' + editors[i]\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tlet sessionRegex = new RegExp(sessionPattern);\n\t\t\t\tlet bundleRegex = new RegExp(bundlePattern);\n\n\t\t\t\t//////////\n\t\t\t\t// Select the bundles to add to the newly generated bundle list(s)\n\t\t\t\t//\n\n\t\t\t\tlet bundleListSource: BundleListItem[] = [];\n\n\t\t\t\tfor (let i = 0; i < dbInfo.sessions.length; ++i) {\n\t\t\t\t\tif (sessionRegex.test(dbInfo.sessions[i].name)) {\n\t\t\t\t\t\tfor (let j = 0; j < dbInfo.sessions[i].bundles.length; ++j) {\n\t\t\t\t\t\t\tif (bundleRegex.test(dbInfo.sessions[i].bundles[j])) {\n\t\t\t\t\t\t\t\tbundleListSource.push({\n\t\t\t\t\t\t\t\t\tsession: dbInfo.sessions[i].name,\n\t\t\t\t\t\t\t\t\tname: dbInfo.sessions[i].bundles[j],\n\t\t\t\t\t\t\t\t\tcomment: '',\n\t\t\t\t\t\t\t\t\tfinishedEditing: false\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t//\n\t\t\t\t//////////\n\n\t\t\t\t//////////\n\t\t\t\t// Shuffle bundle list source if so requested\n\t\t\t\t//\n\n\t\t\t\tif (shuffled) {\n\t\t\t\t\t// @todo shuffle\n\t\t\t\t}\n\n\t\t\t\t//\n\t\t\t\t//////////\n\n\t\t\t\t//////////\n\t\t\t\t// Distribute bundles among editors\n\t\t\t\t//\n\n\t\t\t\t// Prepare a bundle list for each editor\n\n\t\t\t\tlet resultBundleLists: BundleList[] = [];\n\n\t\t\t\tfor (let i = 0; i < editors.length; ++i) {\n\t\t\t\t\tresultBundleLists.push({\n\t\t\t\t\t\tname: editors[i],\n\t\t\t\t\t\tarchiveLabel: '',\n\t\t\t\t\t\titems: []\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// The next editor who will receive a bundle\n\t\t\t\tlet nextEditor: number = -1;\n\n\t\t\t\tfor (let i = 0; i < bundleListSource.length; ++i) {\n\t\t\t\t\tfor (let j = 0; j < personsPerBundle; ++j) {\n\t\t\t\t\t\tnextEditor += 1;\n\t\t\t\t\t\tif (nextEditor >= editors.length) {\n\t\t\t\t\t\t\tnextEditor = 0;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresultBundleLists[nextEditor].items.push(bundleListSource[i]);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t//\n\t\t\t\t//////////\n\n\t\t\t\tlet successCount: number = 0;\n\n\t\t\t\tfor (let i = 0; i < resultBundleLists.length; ++i) {\n\t\t\t\t\tlet params = {\n\t\t\t\t\t\tquery: 'save_bundle_list',\n\t\t\t\t\t\tdatabase: database,\n\t\t\t\t\t\tname: resultBundleLists[i].name,\n\t\t\t\t\t\tlist: JSON.stringify(resultBundleLists[i].items)\n\t\t\t\t\t};\n\n\t\t\t\t\tthis.serverQuery(params).subscribe((next: any) => {\n\t\t\t\t\t\tif (next.success === true) {\n\t\t\t\t\t\t\t++successCount;\n\t\t\t\t\t\t\tobserver.next(null);\n\t\t\t\t\t\t\tif (successCount === resultBundleLists.length) {\n\t\t\t\t\t\t\t\tobserver.complete();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tobserver.error(next);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}).subscribe().unsubscribe();\n\t\t});\n\t}\n\n\tpublic getEmuWebAppURL(database: string): Observable<string> {\n\t\treturn this.getName().map(projectName => {\n\t\t\tlet url = this.emuWebAppURL;\n\t\t\turl += '?autoConnect=true&serverUrl=';\n\n\t\t\tlet nodeJS = this.nodeJSServerURL;\n\n\t\t\t// we should not use this.username here but rather something\n\t\t\t// retrieved from the server (which doesnt exist yet;\n\t\t\t// this.getName() isn't right either but it's used so the\n\t\t\t// function is async already)\n\t\t\tnodeJS += '/' + this.username + '/databases/' + database;\n\n\t\t\turl += encodeURIComponent(nodeJS);\n\n\t\t\treturn url;\n\t\t});\n\t}\n\n\tget connectionCount(): number {\n\t\treturn this._connectionCount;\n\t}\n\n\tset connectionCount(value: number) {\n\t\tthis._connectionCount = value;\n\t}\n\n\tpublic getCommitList(database: string): Observable<Object> {\n\t\treturn Observable.create(observer => {\n\t\t\tlet params = {\n\t\t\t\tquery: 'list_commits',\n\t\t\t\tdatabase: database\n\t\t\t};\n\n\t\t\tthis.serverQuery(params).subscribe((next: any) => {\n\t\t\t\tif (next.success === true) {\n\t\t\t\t\tlet sortedResult = [];\n\n\t\t\t\t\tlet currentMonth: string;\n\t\t\t\t\tlet currentDay: string;\n\n\t\t\t\t\tfor (let i = 0; i < next.data.length; ++i) {\n\t\t\t\t\t\tlet dateTime: string = next.data[i].date;\n\n\t\t\t\t\t\tlet month = dateTime.substring(0, 7);\n\t\t\t\t\t\tlet day = dateTime.substring(0, 10);\n\t\t\t\t\t\tlet time = dateTime.substring(11);\n\n\t\t\t\t\t\tif (month !== currentMonth) {\n\t\t\t\t\t\t\tsortedResult.push({\n\t\t\t\t\t\t\t\tmonth: month,\n\t\t\t\t\t\t\t\topen: false,\n\t\t\t\t\t\t\t\tdays: []\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcurrentMonth = month;\n\t\t\t\t\t\tlet monthObject = sortedResult[sortedResult.length - 1];\n\n\t\t\t\t\t\tif (day !== currentDay) {\n\t\t\t\t\t\t\tmonthObject.days.push({\n\t\t\t\t\t\t\t\tday: day,\n\t\t\t\t\t\t\t\topen: false,\n\t\t\t\t\t\t\t\tcommits: []\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcurrentDay = day;\n\t\t\t\t\t\tlet dayObject = monthObject.days[monthObject.days.length - 1];\n\n\t\t\t\t\t\tdayObject.commits.push({\n\t\t\t\t\t\t\tcommitID: next.data[i].commitID,\n\t\t\t\t\t\t\tdateTime: time,\n\t\t\t\t\t\t\tmessage: next.data[i].message,\n\t\t\t\t\t\t\ttagLabel: ''\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tobserver.next(sortedResult);\n\n\t\t\t\t\tobserver.complete();\n\n\t\t\t\t} else {\n\t\t\t\t\tobserver.error(next);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic getTagList(database: string): Observable<string[]> {\n\t\treturn this.serverQueryWithDefaultSubscription({\n\t\t\t\tquery: 'list_tags',\n\t\t\t\tdatabase: database\n\t\t});\n\t}\n\n\tpublic getConfigComments(database: DatabaseInfo): boolean {\n\t\tif (\n\t\t\t!database\n\t\t\t|| !database.dbConfig\n\t\t\t|| !database.dbConfig['EMUwebAppConfig']\n\t\t\t|| !database.dbConfig['EMUwebAppConfig'].restrictions\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn (database.dbConfig['EMUwebAppConfig'].restrictions.bundleComments === true);\n\t}\n\n\tpublic getConfigFinishedEditing(database: DatabaseInfo): boolean {\n\t\tif (\n\t\t\t!database\n\t\t\t|| !database.dbConfig\n\t\t\t|| !database.dbConfig['EMUwebAppConfig']\n\t\t\t|| !database.dbConfig['EMUwebAppConfig'].restrictions\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn (database.dbConfig['EMUwebAppConfig'].restrictions.bundleFinishedEditing === true);\n\t}\n}\n"]}