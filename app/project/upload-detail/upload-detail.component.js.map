{"version":3,"file":"upload-detail.component.js","sourceRoot":"","sources":["../../../../../../../home/markus/code/emuDB-manager/tmp/broccoli_type_script_compiler-input_base_path-pbsVkT0w.tmp/0/src/app/project/upload-detail/upload-detail.component.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA2C,eAAe,CAAC,CAAA;AAG3D,qCAAiC,4BAA4B,CAAC,CAAA;AAC9D,uBAAqC,iBAAiB,CAAC,CAAA;AAWvD;IAiBC,+BAAoB,kBAAqC,EACrC,KAAoB,EAC7B,MAAa;QAFJ,uBAAkB,GAAlB,kBAAkB,CAAmB;QACrC,UAAK,GAAL,KAAK,CAAe;QAC7B,WAAM,GAAN,MAAM,CAAO;QAlBhB,iBAAY,GAAkB,EAAE,CAAC;QACjC,gBAAW,GAAU,EAAE,CAAC;QACxB,cAAS,GAAG;YACnB,aAAa,EAAE,KAAK;YACpB,OAAO,EAAE,EAAE;YACX,YAAY,EAAE,EAAE;YAChB,cAAc,EAAE,EAAE;SAClB,CAAC;QACM,iBAAY,GAAW,KAAK,CAAC;QAC7B,UAAK,GAAS,UAAU,CAAC;IAUjC,CAAC;IAED,wCAAQ,GAAR;QAAA,iBAsBC;QArBA,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,UAAA,UAAU;YACtD,KAAI,CAAC,SAAS,GAAG,KAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC,UAAA,UAAU;gBAC1F,KAAI,CAAC,MAAM,GAAG,UAAU,CAAC;gBAEzB,EAAE,CAAC,CAAC,KAAI,CAAC,WAAW,CAAC,CAAC,CAAC;oBACtB,KAAI,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC;gBAChC,CAAC;gBAED,KAAI,CAAC,WAAW,GAAG,KAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,KAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,UAAA,YAAY;oBAC9F,EAAE,CAAC,CAAC,YAAY,KAAK,IAAI,CAAC,CAAC,CAAC;wBAC3B,KAAI,CAAC,SAAS,CAAC,aAAa,GAAG,KAAK,CAAC;oBACtC,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACP,KAAI,CAAC,SAAS,CAAC,aAAa,GAAG,IAAI,CAAC;oBACrC,CAAC;gBACF,CAAC,CAAC,CAAC;YACJ,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,kBAAkB,CAAC,eAAe,EAAE,CAAC,SAAS,CAAC,UAAA,QAAQ;YAClF,KAAI,CAAC,YAAY,GAAG,QAAQ,CAAC;QAC9B,CAAC,CAAC,CAAC;IACJ,CAAC;IAED,2CAAW,GAAX;QACC,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;YACtB,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC;QAChC,CAAC;QACD,EAAE,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;YAC1B,IAAI,CAAC,eAAe,CAAC,WAAW,EAAE,CAAC;QACpC,CAAC;QACD,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YACpB,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC;QAC9B,CAAC;QACD,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YACpB,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC;QAC9B,CAAC;IACF,CAAC;IAEO,4CAAY,GAApB;QAAA,iBAcC;QAbA,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;QAE1B,IAAI,CAAC,kBAAkB,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,UAAA,IAAI;YACpE,KAAI,CAAC,kBAAkB,CAAC,SAAS,EAAE,CAAC;YAEpC,EAAE,CAAC,CAAC,KAAI,CAAC,SAAS,CAAC,CAAC,CAAC;gBACpB,KAAI,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC;YAC9B,CAAC;YAED,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC;QAC5C,CAAC,EAAE,UAAA,KAAK;YACP,KAAI,CAAC,WAAW,GAAG,KAAK,CAAC,OAAO,CAAC;QAClC,CAAC,CAAC,CAAC;IACJ,CAAC;IAEO,0CAAU,GAAlB;QAAA,iBAkBC;QAjBA,IAAI,CAAC,SAAS,CAAC,cAAc,GAAG,EAAE,CAAC;QACnC,IAAI,CAAC,SAAS,CAAC,YAAY,GAAG,EAAE,CAAC;QAEjC,IAAI,IAAW,CAAC;QAChB,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC,CAAC;YAClC,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC;QAC/B,CAAC;QAAC,IAAI,CAAC,CAAC;YACP,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;QACzB,CAAC;QAED,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,SAAS,CAAC,UAAA,IAAI;YACxE,KAAI,CAAC,kBAAkB,CAAC,SAAS,EAAE,CAAC;YACpC,KAAI,CAAC,SAAS,CAAC,cAAc,GAAG,8BAA8B,CAAC;QAChE,CAAC,EAAE,UAAA,KAAK;YACP,KAAI,CAAC,SAAS,CAAC,YAAY,GAAG,KAAK,CAAC,OAAO,CAAC;YAC5C,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACpB,CAAC,CAAC,CAAC;IACJ,CAAC;IArGF;QAAC,gBAAS,CAAC;YACV,QAAQ,EAAE,MAAM,CAAC,EAAE;YACnB,QAAQ,EAAE,4BAA4B;YACtC,WAAW,EAAE,8BAA8B;YAC3C,SAAS,EAAE,CAAC,6BAA6B,CAAC;SAC1C,CAAC;;6BAAA;IAiGF,4BAAC;AAAD,CAAC,AAhGD,IAgGC;AAhGY,6BAAqB,wBAgGjC,CAAA","sourcesContent":["import {Component, OnInit, OnDestroy} from \"@angular/core\";\nimport {UploadInfo} from \"../../types/upload-info\";\nimport {Subscription} from \"rxjs/Rx\";\nimport {ProjectDataService} from \"../../project-data.service\";\nimport {ActivatedRoute, Router} from \"@angular/router\";\nimport {DatabaseInfo} from \"../../types/database-info\";\n\ntype State = 'Sessions' | 'Save' | 'Delete';\n\n@Component({\n\tmoduleId: module.id,\n\tselector: 'emudbmanager-upload-detail',\n\ttemplateUrl: 'upload-detail.component.html',\n\tstyleUrls: ['upload-detail.component.css']\n})\nexport class UploadDetailComponent implements OnInit,OnDestroy {\n\tprivate databaseList:DatabaseInfo[] = [];\n\tprivate deleteError:string = '';\n\tprivate mergeForm = {\n\t\tduplicateName: false,\n\t\tnewName: '',\n\t\tmessageError: '',\n\t\tmessageSuccess: '',\n\t};\n\tprivate reallyDelete:boolean = false;\n\tprivate state:State = 'Sessions';\n\tprivate subDatabase:Subscription;\n\tprivate subDatabaseList:Subscription;\n\tprivate subParams:Subscription;\n\tprivate subUpload:Subscription;\n\tprivate upload:UploadInfo;\n\n\tconstructor(private projectDataService:ProjectDataService,\n\t            private route:ActivatedRoute,\n\t\t\t\tprivate router:Router) {\n\t}\n\n\tngOnInit() {\n\t\tthis.subParams = this.route.params.subscribe(nextParams => {\n\t\t\tthis.subUpload = this.projectDataService.getUpload(nextParams['uuid']).subscribe(nextUpload => {\n\t\t\t\tthis.upload = nextUpload;\n\n\t\t\t\tif (this.subDatabase) {\n\t\t\t\t\tthis.subDatabase.unsubscribe();\n\t\t\t\t}\n\n\t\t\t\tthis.subDatabase = this.projectDataService.getDatabase(this.upload.name).subscribe(nextDatabase => {\n\t\t\t\t\tif (nextDatabase === null) {\n\t\t\t\t\t\tthis.mergeForm.duplicateName = false;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.mergeForm.duplicateName = true;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\tthis.subDatabaseList = this.projectDataService.getAllDatabases().subscribe(nextList => {\n\t\t\tthis.databaseList = nextList;\n\t\t});\n\t}\n\n\tngOnDestroy() {\n\t\tif (this.subDatabase) {\n\t\t\tthis.subDatabase.unsubscribe();\n\t\t}\n\t\tif (this.subDatabaseList) {\n\t\t\tthis.subDatabaseList.unsubscribe();\n\t\t}\n\t\tif (this.subParams) {\n\t\t\tthis.subParams.unsubscribe();\n\t\t}\n\t\tif (this.subUpload) {\n\t\t\tthis.subUpload.unsubscribe();\n\t\t}\n\t}\n\n\tprivate deleteUpload () {\n\t\tthis.reallyDelete = false;\n\n\t\tthis.projectDataService.deleteUpload(this.upload.uuid).subscribe(next => {\n\t\t\tthis.projectDataService.fetchData();\n\n\t\t\tif (this.subUpload) {\n\t\t\t\tthis.subUpload.unsubscribe();\n\t\t\t}\n\n\t\t\tthis.router.navigate(['/project/uploads']);\n\t\t}, error => {\n\t\t\tthis.deleteError = error.message;\n\t\t});\n\t}\n\n\tprivate saveUpload () {\n\t\tthis.mergeForm.messageSuccess = '';\n\t\tthis.mergeForm.messageError = '';\n\n\t\tlet name:string;\n\t\tif (this.mergeForm.duplicateName) {\n\t\t\tname = this.mergeForm.newName;\n\t\t} else {\n\t\t\tname = this.upload.name;\n\t\t}\n\n\t\tthis.projectDataService.saveUpload(this.upload.uuid, name).subscribe(next => {\n\t\t\tthis.projectDataService.fetchData();\n\t\t\tthis.mergeForm.messageSuccess = 'The database has been saved.';\n\t\t}, error => {\n\t\t\tthis.mergeForm.messageError = error.message;\n\t\t\tconsole.log(error);\n\t\t});\n\t}\n}\n"]}