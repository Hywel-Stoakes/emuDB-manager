{"version":3,"file":"bundle-lists-dashboard.component.js","sourceRoot":"","sources":["../../../../../../../home/markus/code/emuDB-manager/tmp/broccoli_type_script_compiler-input_base_path-pbsVkT0w.tmp/0/src/app/project/bundle-lists-dashboard/bundle-lists-dashboard.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {Component, OnInit, OnDestroy} from \"@angular/core\";\nimport {BundleList} from \"../../types/bundle-list\";\nimport {Subscription} from \"rxjs/Rx\";\nimport {ProjectDataService} from \"../../project-data.service\";\nimport {DatabaseInfo} from \"../../types/database-info\";\n\ntype State = 'Overview' | 'Generator';\n\n@Component({\n\tmoduleId: module.id,\n\tselector: 'emudbmanager-bundle-lists-dashboard',\n\ttemplateUrl: 'bundle-lists-dashboard.component.html',\n\tstyleUrls: ['bundle-lists-dashboard.component.css']\n})\nexport class BundleListsDashboardComponent implements OnInit,OnDestroy {\n\tprivate bundleLists:BundleList[];\n\tprivate databases:DatabaseInfo[];\n\tprivate state:State = 'Overview';\n\tprivate subBundleLists:Subscription;\n\tprivate subDatabases:Subscription;\n\n\tprivate bundlePattern:string = '.*';\n\tprivate editors:{name:string}[] = [];\n\tprivate generatorError:string = '';\n\tprivate generatorSuccess:string = '';\n\tprivate newEditor:string = '';\n\tprivate personsPerBundle:number = 1;\n\tprivate selectedDatabase:DatabaseInfo = null;\n\tprivate sessionPattern:string = '.*';\n\tprivate shuffle:boolean = false;\n\n\tconstructor(private projectDataService:ProjectDataService) {\n\t}\n\n\tngOnInit() {\n\t\tthis.subBundleLists = this.projectDataService.getAllBundleLists().subscribe(next => {\n\t\t\tthis.bundleLists = next;\n\t\t});\n\t\tthis.subDatabases = this.projectDataService.getAllDatabases().subscribe(next => {\n\t\t\tthis.databases = next;\n\n\t\t\tthis.selectedDatabase = null;\n\t\t});\n\t}\n\n\tngOnDestroy() {\n\t\tif (this.subBundleLists) {\n\t\t\tthis.subBundleLists.unsubscribe();\n\t\t}\n\t\tif (this.subDatabases) {\n\t\t\tthis.subDatabases.unsubscribe();\n\t\t}\n\t}\n\n\tprivate generateLists() {\n\t\tthis.checkNumber();\n\n\t\tthis.generatorError = '';\n\t\tthis.generatorSuccess = '';\n\n\t\tif (!this.selectedDatabase) {\n\t\t\tthis.generatorError = 'Select a database first';\n\t\t\treturn;\n\t\t}\n\t\tif (this.editors.length === 0) {\n\t\t\tthis.generatorError = 'No editors specified';\n\t\t\treturn;\n\t\t}\n\n\t\tthis.projectDataService.generateBundleList(\n\t\t\tthis.selectedDatabase.name,\n\t\t\tthis.sessionPattern,\n\t\t\tthis.bundlePattern,\n\t\t\tthis.editors.map(value => {\n\t\t\t\treturn value.name;\n\t\t\t}),\n\t\t\tthis.personsPerBundle,\n\t\t\tthis.shuffle\n\t\t)\n\t\t\t.subscribe(next => {\n\t\t\t}, error => {\n\t\t\t\tthis.generatorError = error.message;\n\n\t\t\t}, () => {\n\t\t\t\tthis.generatorSuccess += 'Successfully generated all bundle lists';\n\t\t\t\tthis.projectDataService.fetchData();\n\t\t\t});\n\t}\n\n\tprivate addEditor() {\n\t\tthis.editors.push({name: this.newEditor});\n\t\tthis.newEditor = '';\n\t}\n\n\tprivate checkEditor(index:number) {\n\t\tif (this.editors[index].name === '') {\n\t\t\tthis.editors.splice(index, 1);\n\t\t\tthis.checkNumber();\n\t\t}\n\t}\n\n\tprivate checkNumber() {\n\t\tif (this.personsPerBundle > this.editors.length) {\n\t\t\tthis.personsPerBundle = this.editors.length;\n\t\t}\n\t}\n\n\tprivate checkDBConfig():boolean {\n\t\treturn (\n\t\t\tthis.projectDataService.getConfigComments(this.selectedDatabase)\n\t\t\t&&\n\t\t\tthis.projectDataService.getConfigFinishedEditing(this.selectedDatabase)\n\t\t);\n\t}\n}\n"]}